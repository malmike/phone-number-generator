# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      # - image: circleci/node:8.15-browsers
      - image: circleci/node:10.15.0-browsers

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/mongo:3.4.4

    working_directory: ~/repo

    steps:
      # Checkout the code from the branch into the working_directory
      - checkout

      # Setup Code Climate test-reporter
      - run:
          name: Setup Code Climate test-reporter
          command: |
            # download test reporter as a static binary
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter

      # Log the current branch
      - run:
          name: Show the current branch
          command: echo ${CIRCLE_BRANCH}

      # Restore local dependencies from cache
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      # Download yarn
      - run:
          name: Install yarn
          command: npm install yarn

      # Download local dependencies
      - run:
          name: Install local dependencies
          command: yarn install

      # Cache local dependencies if they don't exist
      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package.json" }}

      # Lint the source code
      - run:
          name: Linting
          command: yarn lint

      # run tests!
      - run:
          name: Testing
          command: |
            # notify Code Climate of a pending test report using `before-build`
            ./cc-test-reporter before-build
            # run tests with coverage
            yarn test-coverage
            # upload coverage to code climate using `after-build`
            ./cc-test-reporter format-coverage -t lcov ./coverage/lcov.info
            ./cc-test-reporter upload-coverage

      # Build project with different configurations based on
      # on the current branch
      - run:
          name: Building
          command: |
            if [ "${CIRCLE_BRANCH}" == "staging" ]; then
              yarn build-qa
            elif [ "${CIRCLE_BRANCH}" == "master" ]; then
              yarn build-prod
            else
              yarn build
            fi

      # Cache the dist folder for the deploy job
      - save_cache:
          paths:
            - dist
          key: v1-dist-{{ .Environment.CIRCLE_BRANCH }}-{{ .Environment.CIRCLE_SHA1 }}


  # The deploy job
  deploy:
    docker:
      - image: circleci/node:10.15.0-browsers
    working_directory: ~/repo
    steps:
      # Log the current branch
      - run:
          name: Show current branch
          command: echo "${CIRCLE_BRANCH}"}

      # Restore cache from the build job which contains the
      # dist folder that needs to be deployed
      - restore_cache:
          key: v1-dist-{{ .Environment.CIRCLE_BRANCH }}-{{ .Environment.CIRCLE_SHA1 }}

      # Install AWS CLI
      - run:
          name: Install aws cli
          command: sudo apt-get -y -qq install awscli

      # Set the signature version for the S3 auth
      - run:
          name: Setting signature Version for S3 Request Authentication
          command: aws configure set default.s3.signature_version s3v4

      - run:
          name: files in path
          command: ls

      - run:
          name: files in dist
          command: cd dist && ls

      # Deploy to the S3 bucket corresponding to the current branch
      - run:
          name: Deploy to S3
          command: |
            if [ "${CIRCLE_BRANCH}" == "dev" ]; then
              aws --region eu-west-2 s3 sync dist s3://phone-number-generator-dev/ --delete
            elif [ "${CIRCLE_BRANCH}" == "staging" ]; then
              aws --region eu-west-2 s3 sync dist s3://phone-number-generator-qa/ --delete
            elif [ "${CIRCLE_BRANCH}" == "master" ]; then
              aws --region eu-west-2 s3 sync dist s3://phone-number-generator/ --delete
            else
              aws --region eu-west-2 s3 sync dist s3://phone-number-generator-dev/ --delete
            fi

workflows:
  version: 2
  # The build and deployment workflow
  build_and_deploy:
    jobs:
      - build

      # The deploy job will only run on the filtered branches and
      # require the build job to be successful before it starts
      - deploy:
          requires:
            - build
          # filters:
          #   branches:
          #     only:
          #       - dev
          #       - staging
          #       - master